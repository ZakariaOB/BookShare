Working skeleton API
----------------------------------------

- Useful commands to work for .NET projects
  => dotnet --version : All the installed versions on the machine
  => dotnet -h : help commands
  => dotnet new sln : solution file

- dotnet new webapi -o API : -o output directory as we need the api to have it's own folder
- Add the api to our solution : dotnet sln add API
- In VS code : to hide some folders or files from the solution you can use Files:exclude
  add pattern example : **/bin ; **/obj
- Command to run the .Net core project : dotent run
- Security : Some websites are using https in order to secure the data exchanged using SSL and more adapted version
  TLS => https://www.websecurity.digicert.com/security-topics/what-is-ssl-tls-https
- Https : https://stackoverflow.com/questions/8375134/difference-between-http-and-https#:~:text=HTTPS%20means%20that%20you%20tunnel,How%20to%20use%20HTTPS%3F
- In order for my machine to trust the .NET certificate
  dotnet dev-certs https --trust
- Review : Lecture 8
- dotnet run => Run the application
- The entry point for our application is Program.cs
- Logging level : What happend when we hit endpoints is described by the console logging system
- Use Https redirection (UseHttpsRedirection) : If we come with an http url we are redirected to an https one 
- "launchBrowser": false in launchSettings.json
- dotnet watch run => Keep an eye on the changes
- Benefits of EF :
    => Querying
    => Change tracking
    => Saving
    => Concurrency
    => Transactions
    => Caching
    => Built-in-conventions (Id, foreign key names etc ...)
    => Migrations
- Install Nuget gallery for nuget management
- In order to use the DbContext inside the app make sure to inject it also inside StartUp.cs class
- We can use on appSettings.Developpemnt.json any information that could be seen bu other users
- In order to start code first with EF we need to install dotnet-ef . But it's already installed with EFSql server
  - Migration command : dotnet ef migrations add initialCreate -o Data/Migrations
  > -o : create a folder
- Dotnet tool EF update 
    (update : Update | install : Install)
  => dotnet tool update --global dotnet-ef --version 5.0.0-preview.8.20407.4
- The migration files are used to run against a database , when you create a migration it's not updating the model.
- To undo the migration action, use 'ef migrations remove'
- dotnet ef database update
- Always use asynchronous code when dealing with database calls
- Init a git repo : git init
- Add git ignore file : dotnet new gitignore
- appsettings.json should be ignored : To recheck later
- To link the local repo to a distant one : git remote add origin https://github.com/ZakariaOB/BookShare.git


Working skeleton ANGULAR
----------------------------------------
- update 
    NodeJs : Reinstall it
    npm : 
       Run PowerShell as Administrator
        Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force
        npm install -g npm-windows-upgrade
        npm-windows-upgrade   
- Use the angular CLI
- npm install -g @angular/cli
- Decoratcor : Giving a class some extra power
- Lecture : 23 => Making http requests in Angular

- CORS : Modern browsers will not allow reaching an app from a different origin than 
  the one containing it (The difference could be simply on the port number, as example API and client
  projects that we are using) . To allow this AddCors() inside the API.
- Normally don't use jQuery as Angular also change the DOM
- Install angular bootstrap (ngx-bootstrap)
- ng add ngx-bootstrap
- Install a certificate for our angular app to use https (SSL)
- We don't want to put any sensible information inside our client project


Authentication basics
-----------------------------------------------
- dotnet ef migrations add UpdateAppUser -o Data/Migrations
- Think about validating your dtos coming from the client side even if the client will validate 
  things before hitting the API
- [APIController] is the responsible of using DTOs validation rules and send back issues 
  for the requests coming from the API .
- We can validate our models : [Required] , [Email], [StringLength] and others and we can also 
  our custom validators
- Did the register endpoint and then the login one inside the AccountController
- Services are good to manage on 'AddScoped' as we don't need the service as soon as a request 
  is done .
- For new packages => Open nuGet gallery
- In order for .NET core to handle the authentication we need Microsoft.AspNetCore.Authentication.JwtBearer
  installed .
- The logic behind is that : We use the authentication middlware of .NET core and we configure it on the StartUp class 
  > services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme) (Extension class)
  > app.UseAuthentication => to enbale the usage of the service 
  > app.UseAuthorization => To enable the usage of the UseAuthorization
  > At this point when you login you get your token generated inside the app and propably recognized by the authentication middlware
  > Now the app knwos your token
  > [Authorize] will check your token and will give you access or not to the requested action



Client login and register :
----------------------------------------
- ng g c nav --skip-tests (Create a component withour tests)
- to add a form => #loginForm="ngForm"
- ng g c home --skip-tests
- ng g c register --skip-tests

Routing in Angular
---------------------------------------------
- npm install bootswatch => Bootstrap themes
- npm install ngx-toastr => Notifications
- Adding and AuthGuard to secure routes
- Check the usage of modules in Angular

Error handling
---------------------------------------------
- To use an interceptor : 
  app.module.ts
  providers: [
    {provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true}
  ],

- Http errors
   > 404 : Not found
   > 400 : Bad request (Can be returned with BadRequest) | Validation error (The api could handle that directly or implicitly as used 
           for the model validation errors .)
   > 500 : server error should be converted by the middleware for a better usage .
   > 401: Unauthorized

- Things are not so obvious when using a middleware . The idea is to create the middleware 
  and inside it you can catch an exception . what will happen after that is by writing :
   context.Response.ContentType = "application/json";
   context.Response.StatusCode = (int) HttpStatusCode.InternalServerError;
  An http response object will be created containg signficant information with an error object
  => HttpResponse {error = null, name, url, status, statusText} ...
  => This object can be filled from the API by using : await context.Response.WriteAsync(json);
      
      HttpErrorResponse {headers: HttpHeaders, status: 400, statusText: "OK", url: "https://localhost:5001/api/account/register", ok: false, …}
          error: {type: "https://tools.ietf.org/html/rfc7231#section-6.5.1", title: "One or more validation errors occurred.", status: 400, traceId: "00-a144dc7b92c6bb4bbe20cffc19c86b1f-802ed0763d7e2c4a-00", errors: {…}}
          headers: HttpHeaders {normalizedNames: Map(0), lazyUpdate: null, lazyInit: ƒ}
          message: "Http failure response for https://localhost:5001/api/account/register: 400 OK"
          name: "HttpErrorResponse"
          ok: false
          status: 400
          statusText: "OK"
          url: "https://localhost:5001/api/account/register"
          __proto__: HttpResponseBase

  => The idea here is to provide a json object as the error and reuse it in the client side 
     (ApiException class that was serialized to json)
  => IF the error is a 400 validation error .NET will create an HttpResponseError object with the error object filled with 
     validation error details (The middlware treatement of the issue will not be reached as no exception is raised)
          errors:
          Password: ["The Password field is required."]
          Username: ["The Username field is required."]
          __proto__: Object
          status: 400
          title: "One or more validation errors occurred."
          traceId: "00-a144dc7b92c6bb4bbe20cffc19c86b1f-802ed0763d7e2c4a-00"
          type: "https://tools.ietf.org/html/rfc7231#section-6.5.1"
          __proto__: Object

Extending the API
---------------------------------------------
- Check the usage of the ProjectTo (Automapper IQueryable exetensions) inside a BaseRepository .
- The idea I think of these projection is to send a limited select of columns to the DB .
- dotnet ef migrations add ExtendModelAddPhotos -o Data/Migrations
- Review this section and try to summarize it .
- Seed method and usage of Automapper
- When we use project to we don't need includes (Some how obvious as automapper 
  will call the DB on lazy loading mode)

Building the user interface
---------------------------------------------
- npm i @kolkov/ngx-gallery
- The best part about this section is the interceptor that will get the request before sending it
  add to it the necessary the token coming from the current user saved inside the accountService 
  and then make sure that all requests will continue to the server with out beautiful token !!! => SO NICE


Updating resources
---------------------------------------------

- In order to use ngx-spinner we will need angular-cdk
- Nice trick for the loading spinners : Using interceptors on the request pipeline
  to show / hide the loading logo => GREAT
- Always there a guard for a certain component to prevent leaving without saving 
- ViewChild => It provides a reference to elements or components in your view .
- HostListener is used to detect any change on the app outside of the angular App (Similar to ref in Vue I beleive)
- Review the usage of HostListener
- Services are singletons
- Some caching is implemented inside the memmber-list component

Photos functionnality
-----------------------------------------------------
- Don't forget : You can always strong type your config variables by creating some
  custom classes .
- The photo service will deal with cloudinary for you
- Review module and summarize 

Reactive forms
-----------------------------------------------------
- Forms on angular can have all the utilities to manage : errors object that react 
  with what's wrong .
- All Form controls derive from ngControl
- constructor(@Self() public ngControl: NgControl)
  => To access the ngControl inside the created new component
- Use use the form builder service => Reactive form

Pagination, Filtering and sorting
---------------------------------------------------------
- Filters in ASP.NET Core allow code to be run before or after specific stages in the request processing pipeline.
- LogUserActivity => Filter used to log the activity after finishing every request (Proposably at the end of the request pipeline)
- Check why the pagination information is on the header of the requests